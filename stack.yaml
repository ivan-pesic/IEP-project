version: '3'

services:
  adminer:
    image: adminer
    ports:
      - 8080:8080
    networks:
      - admin
      - authnework
      - daemon
      - customer
      - storekeeper

  authenticationDB:
    image: mysql
    environment:
      - MYSQL_ROOT_PASSWORD=root
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 10s
      retries: 10
    volumes:
      - authdbdata:/var/lib/mysql
    networks:
      - authnework

  authenticationDBMigration:
    image: authenticationdbmigration
    environment:
      - DATABASE_URL=authenticationDB
    networks:
      - authnework
    build:
      context: .
      dockerfile: authenticationDBMigration.dockerfile

  authentication:
    image: authentication
    environment:
      - DATABASE_URL=authenticationDB
    ports:
      - 5002:5002
    networks:
      - authnework
    build:
      context: .
      dockerfile: authentication.dockerfile

  storeDB:
    image: mysql
    environment:
      - MYSQL_ROOT_PASSWORD=root
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      timeout: 10s
      retries: 10
    volumes:
      - storedbdata:/var/lib/mysql
    networks:
      - customer
      - daemon
      - admin

  redis:
    image: redis
    networks:
      - storekeeper
      - daemon

  storeDBMigration:
    image: storedbmigration
    environment:
      - DATABASE_URL=storeDB
    networks:
      - customer
      - daemon
      - admin
    build:
      context: .
      dockerfile: storeDBMigration.dockerfile

  customer:
    image: customer
    environment:
      - DATABASE_URL=storeDB
    ports:
      - 5000:5000
    networks:
      - customer
    build:
      context: .
      dockerfile: customer.dockerfile
    deploy:
      replicas: 3

  storekeeper:
    image: storekeeper
    environment:
      - DATABASE_URL=storeDB
    ports:
      - 5001:5001
    networks:
      - storekeeper
    build:
      context: .
      dockerfile: storekeeper.dockerfile
    deploy:
      replicas: 3

  admin:
    image: admin
    environment:
      - DATABASE_URL=storeDB
    ports:
      - 5003:5003
    networks:
      - admin
    build:
      context: .
      dockerfile: admin.dockerfile

  daemon:
    image: daemon
    environment:
      - DATABASE_URL=storeDB
    networks:
      - daemon
    build:
      context: .
      dockerfile: daemon.dockerfile

volumes:
  authdbdata:
  storedbdata:

networks:
  authnework:
    driver: overlay
  customer:
    driver: overlay
  storekeeper:
    driver: overlay
  daemon:
    driver: overlay
  admin:
    driver: overlay